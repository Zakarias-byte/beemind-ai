name: Deploy BeeMind to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  DOMAIN: beemind.dev

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python tests
      run: |
        python -m pytest tests/ || echo "No tests found"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Install Node.js dependencies
      run: |
        cd dashboard
        npm ci

    - name: Build dashboard
      run: |
        cd dashboard
        npm run build

    - name: Run dashboard tests
      run: |
        cd dashboard
        npm test || echo "No tests found"

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy Backend to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🚀 Deploying BeeMind Backend..."
          
          # Navigate to application directory
          cd /opt/beemind
          
          # Stop backend service
          sudo systemctl stop beemind-backend || true
          
          # Pull latest code
          git pull origin main
          
          # Update Python dependencies
          source venv/bin/activate
          pip install -r requirements.txt
          
          # Create/update environment file
          cat > .env << EOF
          # Database Configuration
          DATABASE_URL=postgresql://beemind:beemind_password@localhost/beemind
          REDIS_URL=redis://localhost:6379
          
          # Dashboard Configuration
          DASHBOARD_HOST=0.0.0.0
          DASHBOARD_PORT=8001
          WEBSOCKET_PATH=/ws
          CORS_ORIGINS=https://${{ env.DOMAIN }},https://www.${{ env.DOMAIN }}
          
          # Production Configuration
          ENVIRONMENT=production
          LOG_LEVEL=INFO
          DEBUG=false
          
          # Security
          SECRET_KEY=${{ secrets.BEE_MIND_SECRET_KEY }}
          JWT_SECRET=${{ secrets.BEE_MIND_JWT_SECRET }}
          
          # Performance
          MAX_CONCURRENT_CONNECTIONS=1000
          ENABLE_GPU_ACCELERATION=false
          EOF
          
          # Start backend service
          sudo systemctl start beemind-backend
          sudo systemctl enable beemind-backend
          
          # Wait for service to start
          sleep 10
          
          # Health check
          if curl -f http://localhost:8000/health; then
            echo "✅ Backend deployed successfully!"
          else
            echo "❌ Backend deployment failed!"
            sudo journalctl -u beemind-backend -n 20
            exit 1
          fi

  deploy-dashboard:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Install Node.js dependencies
      run: |
        cd dashboard
        npm ci

    - name: Build dashboard
      run: |
        cd dashboard
        npm run build

    - name: Deploy Dashboard to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🚀 Deploying BeeMind Dashboard..."
          
          # Navigate to application directory
          cd /opt/beemind
          
          # Stop dashboard service
          sudo systemctl stop beemind-dashboard || true
          
          # Pull latest code
          git pull origin main
          
          # Install Node.js dependencies and build
          cd dashboard
          npm ci
          npm run build
          cd ..
          
          # Start dashboard service
          sudo systemctl start beemind-dashboard
          sudo systemctl enable beemind-dashboard
          
          # Wait for service to start
          sleep 10
          
          # Health check
          if curl -f http://localhost:8001/api/dashboard/status; then
            echo "✅ Dashboard deployed successfully!"
          else
            echo "❌ Dashboard deployment failed!"
            sudo journalctl -u beemind-dashboard -n 20
            exit 1
          fi

  deploy-nginx:
    needs: [deploy-backend, deploy-dashboard]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy Nginx Configuration
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🌐 Updating Nginx configuration..."
          
          # Update Nginx configuration
          sudo tee /etc/nginx/sites-available/${{ env.DOMAIN }} > /dev/null <<EOF
          server {
              listen 80;
              server_name ${{ env.DOMAIN }} www.${{ env.DOMAIN }};
              
              # Redirect HTTP to HTTPS
              return 301 https://\$server_name\$request_uri;
          }
          
          server {
              listen 443 ssl http2;
              server_name ${{ env.DOMAIN }} www.${{ env.DOMAIN }};
              
              # SSL Configuration (Let's Encrypt)
              ssl_certificate /etc/letsencrypt/live/${{ env.DOMAIN }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${{ env.DOMAIN }}/privkey.pem;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;
              
              # Security headers
              add_header X-Frame-Options DENY;
              add_header X-Content-Type-Options nosniff;
              add_header X-XSS-Protection "1; mode=block";
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              
              # Main API
              location / {
                  proxy_pass http://localhost:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }
              
              # Dashboard WebSocket
              location /ws {
                  proxy_pass http://localhost:8001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              # Dashboard API
              location /api/dashboard {
                  proxy_pass http://localhost:8001;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              # Dashboard Frontend
              location /dashboard {
                  alias /opt/beemind/dashboard/dist;
                  try_files \$uri \$uri/ /dashboard/index.html;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              
              # Health check
              location /health {
                  proxy_pass http://localhost:8000;
                  access_log off;
              }
              
              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
          }
          EOF
          
          # Test Nginx configuration
          sudo nginx -t
          
          # Reload Nginx
          sudo systemctl reload nginx
          
          echo "✅ Nginx configuration updated!"

  final-health-check:
    needs: [deploy-backend, deploy-dashboard, deploy-nginx]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Final Health Check
      run: |
        echo "🔍 Performing final health checks..."
        
        # Wait for services to be fully ready
        sleep 30
        
        # Test main API
        if curl -f https://${{ env.DOMAIN }}/health; then
          echo "✅ Main API is healthy"
        else
          echo "❌ Main API health check failed"
          exit 1
        fi
        
        # Test dashboard API
        if curl -f https://${{ env.DOMAIN }}/api/dashboard/status; then
          echo "✅ Dashboard API is healthy"
        else
          echo "❌ Dashboard API health check failed"
          exit 1
        fi
        
        # Test dashboard frontend
        if curl -f https://${{ env.DOMAIN }}/dashboard; then
          echo "✅ Dashboard frontend is accessible"
        else
          echo "❌ Dashboard frontend health check failed"
          exit 1
        fi
        
        echo "🎉 All health checks passed!"

  notify:
    needs: [deploy-backend, deploy-dashboard, deploy-nginx, final-health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.final-health-check.result }}" == "success" ]; then
          echo "🎉 BeeMind deployed successfully!"
          echo "🌐 Main API: https://${{ env.DOMAIN }}"
          echo "📊 Dashboard: https://${{ env.DOMAIN }}/dashboard"
          echo "📚 API Docs: https://${{ env.DOMAIN }}/docs"
        else
          echo "❌ Deployment failed!"
          echo "Backend: ${{ needs.deploy-backend.result }}"
          echo "Dashboard: ${{ needs.deploy-dashboard.result }}"
          echo "Nginx: ${{ needs.deploy-nginx.result }}"
          echo "Health Check: ${{ needs.final-health-check.result }}"
          exit 1
        fi
